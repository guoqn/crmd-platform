package com.ffcs.crmd.platform.pub.proxy.callframework.proxy;

import com.ctg.itrdc.event.dto.EventProxyCtxDTO;
import com.ctg.itrdc.event.rule.RPCRuleResDecoder;
import com.ctg.itrdc.event.rule.RuleResult;
import com.ctg.itrdc.event.utils.EventDrivenUtil;
import com.ctg.itrdc.event.utils.RPCResultHelper;
import com.ctg.itrdc.platform.common.exception.RtManagerException;
import com.ctg.itrdc.platform.common.fileconfig.SystemConfigHelper;
import com.ctg.itrdc.platform.common.log.ILogger;
import com.ctg.itrdc.platform.common.log.LoggerFactory;
import com.ctg.itrdc.platform.common.utils.serializer.Serializer;
import com.ctg.itrdc.platform.common.utils.serializer.SerializerFactory;
import com.ctg.itrdc.platform.common.utils.serializer.ServantSerialFormat;
import com.ctg.itrdc.platform.common.utils.type.StringUtils;
import com.ctg.itrdc.platform.pub.bean.HeadInfo;
import com.ctg.itrdc.platform.pub.bean.ReqData;
import com.ctg.itrdc.platform.pub.bean.ReqResult;
import com.ctg.itrdc.platform.pub.context.SessionContext;
import com.ctg.itrdc.platform.pub.proxylog.ProxyLogFactory;
import com.ctg.itrdc.platform.pub.util.ApplicationContextUtil;
import com.ffcs.crmd.platform.pub.ex.ExceptionUtils;
import com.ffcs.crmd.platform.pub.proxy.CrmServiceHelper;
import com.ffcs.crmd.platform.pub.proxy.IExchangeService;
import com.ffcs.crmd.platform.pub.proxy.callfilter.IProxyCallFilter;
import com.ffcs.crmd.platform.pub.proxy.callfilter.ProxyCallFilterFactory;
import com.ffcs.crmd.platform.pub.proxy.callframework.CallContextConstants;
import com.ffcs.crmd.platform.pub.proxy.callframework.CallEntity;
import com.ffcs.crmd.platform.pub.proxy.callframework.ICallContext;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Map;
import java.util.Properties;

public class CrmServiceBatchCallProxyHandler
    implements InvocationHandler, RPCRuleResDecoder<ReqResult> {

    private static final ILogger logger = LoggerFactory
        .getLogger(CrmServiceBatchCallProxyHandler.class);

    private Properties serviceConfig;

    private String defaultSerialType = ServantSerialFormat.XML.getFormat();

    //    private IExchangeService     exchangeService   = ApplicationContextUtil
    //                                                       .getBean("exchangeService");

    public CrmServiceBatchCallProxyHandler(Properties serviceConfig) {
        this.serviceConfig = serviceConfig;
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if (serviceConfig == null) {
            throw new IllegalArgumentException("'serviceConfig' must not be null");
        }
        String reqStr = "";

        String retStr = "";
        Long beginTime = System.nanoTime();
        try {
            logger.debug("invoke start...");
            // 增加模块名称作为后端服务的区分标志
            String serialType = serviceConfig.getProperty("serialType");
            String serviceName = serviceConfig.getProperty("serviceName");
            String modName = StringUtils.strnull(args[0]);

            if (StringUtils.isNullOrEmpty(modName)) {
                throw new RtManagerException("modName must not be null");
            }

            IExchangeService exchangeService = ApplicationContextUtil
                .getBean(StringUtils.first2Lower(modName) + "ExchangeService");
            return CrmServiceHelper
                .callExchange(exchangeService, modName, serialType, serviceName, method, args, this,
                    reqStr, retStr);
        } catch (Exception e) {
            ProxyLogFactory.getLogger().fail(reqStr, retStr, e);
            throw e;
        } finally {
            logger.debug("total Coast(ns):" + (System.nanoTime() - beginTime));
        }

    }

    @Override
    public List<RuleResult> decode(ReqResult arg0) {
        return arg0.getHeadInfo().getRuleResults();
    }

    @Override
    public void getRealTimeResults(ReqResult arg0) {
        RPCResultHelper.getRealTimeResults(this, arg0);
    }

    @Override
    public void getWarnResults(ReqResult arg0) {
        RPCResultHelper.getWarnResults(this, arg0);
    }
}
