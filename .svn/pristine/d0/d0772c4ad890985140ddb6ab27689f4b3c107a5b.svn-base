<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2010 The myBatis Team Licensed under the Apache License, Version 
	2.0 (the "License"); you may not use this file except in compliance with 
	the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
	Unless required by applicable law or agreed to in writing, software distributed 
	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
	OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
	the specific language governing permissions and limitations under the License. -->

<!-- This is a org.mybatis.spring.sample context that shows four different 
	ways to integrate with Spring. FooService* are beans that act as business 
	services. All of the services implement FooService which is annotated as 
	@Transactional. Each one is injected with a mapper coded/created in a different 
	way: userMapperBean is created with a MapperFactoryBean (has no implementation) 
	userMapper is searched and registered by the MapperScannerConfigurer (has 
	no implementation) userMapperDaoSupport extends SqlSessionDaoSupport userMapperSqlSession 
	uses directly MyBatis API (has no transaction support) version: $Id: context.xml 
	2717 2010-10-15 15:37:00Z eduardo.macarron $ -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
     http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<bean id="dubboConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="order" value="2"></property>
		<property name="ignoreUnresolvablePlaceholders" value="true"></property>
		<property name="locations">
			<list>
				<value>classpath:conf/dubbo-config.properties</value>
			</list>
		</property>
	</bean>


	<!-- 提供方应用信息，用于计算依赖关系 -->
	<dubbo:application name="${dubbo-app-name}" />
	<!-- 使用multicast广播注册中心暴露服务地址 -->
	<dubbo:registry address="${dubbo-reg-zk-address}"
		client="${dubbo-reg-client}" group="${dubbo-reg-zk-root}" file="${user.home}/dubbo-cache/${dubbo-app-name}/dubbo.cache" />
	<!-- 用dubbo协议在20880端口暴露服务 -->
	<dubbo:protocol port="${dubbo-reg-protocol-port}" />
	<!-- 扫描注解包路径，多个包用逗号分隔，不填pacakge表示扫描当前ApplicationContext中所有的类 -->
	<!-- <dubbo:annotation /> -->
	<!-- <context:component-scan base-package="com" -->
	<!-- use-default-filters="false"> -->
	<!-- <context:include-filter type="annotation" -->
	<!-- expression="com.alibaba.dubbo.config.annotation.Service" /> -->
	<!-- </context:component-scan> -->
	<!-- 加载property文件配置 -->

	<dubbo:provider filter="dubboThreadLocalFilter" timeout="${dubbo-provider-timeout}" cluster="${dubbo-provider-cluster}" retries="${dubbo-provider-retries}">
	</dubbo:provider>

	<!-- 增加监控中心 -->
	<dubbo:monitor protocol="registry" />
</beans>
