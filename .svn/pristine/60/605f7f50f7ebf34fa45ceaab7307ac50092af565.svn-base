##配置查找顺序
###先找接口最个性化的配置 前缀+"." + [requester] + "." + [responder] + "." + [extraKey] ,如loggers.CRM.PF=slf4j
###接着找针对请求方的全局配置  前缀+"." + "global" + [requester] ,如loggers.global.CRM
###接着找针对响应方的全局配置  前缀+"." + "global" + [responder] ,如loggers.global.PF
###最后找全局的配置 前缀+"." + "global" ,如loggers.global
###都未配置,则返回程序默认值

##前缀列表级对应默认值
###async,是否异步调用方式,核心线程的调用模式,可选值:true,false,程序默认值:true
###threadLevel,线程级别,默认核心的处理方式,可选值:single(独立线程池),shared(共享线程池),direct(直接调用),程序默认值,shared,需要async配置为true才会生效
###mock,是否模拟调用返回,可选值:true,false,程序默认值:false
###timeout,异步调用超时时间,异步模式开启有效,单位ms,默认值 30*1000ms
###beforeLogLevel,前置日志调用级别,可选值:off(关闭),sync(同步日志),async(异步日志),程序默认为off
###afterLogLevel,前置日志调用级别,可选值:off(关闭),sync(同步日志),async(异步日志),程序默认为async
###threadGroup,线程池分组名,默认为:globalThreadGroup
###threadPoolName,核心线程池名称,默认为[requester] + "_#_" + [responder] + "_#_" + [extraKey],如:CRM_#_PF_#_  , 共享模式的线程池名字:globalPool
###logThreadPoolName,日志线程池名称,默认为:globalLogPool
###loggers,日志记录方式,根据appender里面的方法注册,可以配置多种,实现多写入,如logger.CRM.PF.=log4j,db,默认值为slf4j

##注意:以上配置中,任意一个字段为空,则用空串代替:如 CRM.PF.xxx , CRM..xxx , CRM.PF. ,

async.global=true
threadLevel.global=shared
mock.global=false
timeout.global=30000
timeout.global.PF=10000
beforeLogLevel.global=off
afterLogLevel.global=sync
threadGroup.global=globalThreadGroup
logThreadPoolName.global=globalLogPool
loggers.global=slf4j

async.CRM.PF.=false
mock.CRM.PF.=true
beforeLogLevel.CRM.PF.=async
threadGroup.CRM.PF.=CrmGroup
threadPoolName.CRM.PF.=CrmAndPf
logThreadPoolName.CRM.PF.=CrmAndPfLog

timeout.CRM.PF.completeOrder=5000
threadPoolName.CRM.PF.completeOrder=CrmAndPf

