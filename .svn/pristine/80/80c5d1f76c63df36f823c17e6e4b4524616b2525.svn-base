###是否开始控制台性能指标输出，0代表不输出，大于0的数，表示每隔多少秒输出一次，默认30
metric.report.console=0
###格式 wait.strategy.#group#.#producerName#,可选值Block,Sleep,Yield,默认Block
###Disruptor 提供了多个 WaitStrategy 的实现，每种策略都具有不同性能和优缺点，根据实际运行环境的 CPU 的硬件特点选择恰当的策略，并配合特定的 JVM 的配置参数，能够实现不同的性能提升。
###例如，BlockingWaitStrategy、SleepingWaitStrategy、YieldingWaitStrategy等，其中，BlockingWaitStrategy 是最低效的策略，但其对CPU的消耗最小并且在各种不同部署环境中能提供更加一致的性能表现；
###SleepingWaitStrategy 的性能表现跟BlockingWaitStrategy差不多，对CPU的消耗也类似，但其对生产者线程的影响最小，适合用于异步日志类似的场景；
###YieldingWaitStrategy 的性能是最好的，适合用于低延迟的系统。在要求极高性能且事件处理线数小于 CPU 逻辑核心数的场景中，推荐使用此策略；
###例如，CPU开启超线程的特性。
wait.strategy.remote.remoteClient=Block
###线程池消费者数量 格式：thread.count.#group#.#producerName#,默认10
thread.count.remote.remoteClient=40
###buffer大小，也代表能堆积的数量，格式buffer.size.#group#.#producerName#,默认256 * 1024，最小128
buffer.size.remote.remoteClient=10000
###异常处理器,格式exception.handler.#group#.#producerName#,可以自定义,需要继承com.ffcs.crmd.lmax.base.AbstractTransEventExceptionHandler，默认com.ffcs.crmd.lmax.base.defaultImpl.DefaultTransEventExceptionHandler
exception.handler.remote.remoteClient=com.ffcs.crmd.lmax.base.defaultImpl.DefaultTransEventExceptionHandler
###当buffer堆积满的时候，继续publish的时候是否阻塞，true阻塞，false，不阻塞，消息直接丢弃。
publish.block.remote.remoteClient=true


pool.poolClass.com.ffcs.crmd.platform.pub.proxy.callframework.lmax.ModCallCommand=com.ffcs.crmd.platform.pub.proxy.callframework.lmax.ModCallCommandPool
pool.configClass.com.ffcs.crmd.platform.pub.proxy.callframework.lmax.ModCallCommand=com.ffcs.crmd.platform.pub.proxy.callframework.lmax.ModCallCommandPoolConfig
pool.config.lifo.com.ffcs.crmd.platform.pub.proxy.callframework.lmax.ModCallCommand=false
pool.config.maxTotal.com.ffcs.crmd.platform.pub.proxy.callframework.lmax.ModCallCommand=15000
pool.config.maxIdle.com.ffcs.crmd.platform.pub.proxy.callframework.lmax.ModCallCommand=10000
pool.objectFactoryClass.com.ffcs.crmd.platform.pub.proxy.callframework.lmax.ModCallCommand=com.ffcs.crmd.platform.pub.proxy.callframework.lmax.ModCallCommandPoolObjectFactory

