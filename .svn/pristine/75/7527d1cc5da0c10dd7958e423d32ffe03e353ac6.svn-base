package com.ffcs.crmd.platform.mq.rocketmq.producer.impl;

import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;

import com.alibaba.rocketmq.client.exception.MQClientException;
import com.alibaba.rocketmq.client.log.ClientLogger;
import com.alibaba.rocketmq.client.producer.DefaultMQProducer;
import com.alibaba.rocketmq.client.producer.MessageQueueSelector;
import com.alibaba.rocketmq.client.producer.SendResult;
import com.alibaba.rocketmq.common.message.Message;
import com.alibaba.rocketmq.common.message.MessageQueue;
import com.ffcs.crmd.platform.mq.MqException;
import com.ffcs.crmd.platform.mq.ProdResult;
import com.ffcs.crmd.platform.mq.rocketmq.producer.selector.impl.SimpleQueueSelector;
import com.ffcs.crmd.platform.mq.rocketmq.util.MessageUtil;

/**
 * 
 * 功能说明:无序生产者
 *
 * @author CHENZHI
 * 
 * @Date 2015年10月30日 下午2:57:23
 *
 *
 * 版本号  |   作者   |  修改时间   |   修改内容
 *
 */
public class DefaultProducer extends AbstractProducer {
    
    /**
     * 日志
     */
    private final Logger              log            = ClientLogger.getLog();
    
    /**
     * 选择器
     */
    private final SimpleQueueSelector simpleSelector = new SimpleQueueSelector();
    
    /**
     * 生产者实例
     */
    private DefaultMQProducer         producer       = null;
    
    public DefaultProducer() {
        
    }
    
    /**
     * 
     * 功能说明:生产者启动
     * 
     * @author ZHONGFUHUA
     *
     * @Date 2015年10月30日
     *
     */
    @Override
    public void start() throws MqException {
        if (producer == null) {
            this.checkConfig();
            producer = new DefaultMQProducer();
            try {
                producer.setProducerGroup(this.getGroupName());
                producer.setNamesrvAddr(this.getNameSrv());
                producer.setInstanceName(this.getInstanceName());
                producer.setMaxMessageSize(this.getMaxMessageSize());
                producer.setSendMsgTimeout(this.getSendTimeOut());
                producer.start();
                log.info("CrmLogger: DisOrderly producer start success  [{}]",
                    producer.getClientIP() + "@" + producer.getInstanceName());
            } catch (MQClientException e) {
                log.warn("CrmLogger: DisOrderly producer start fail  {} [{}]",
                    producer.getClientIP() + "@" + producer.getInstanceName(), e.getMessage());
                throw new MqException(e.getMessage(), e.getCause());
            }
        } else {
            log.warn("CrmLogger: DisOrderly producer already started,maybe bean init error");
        }
    }
    
    /**
     * 
     * 功能说明:发送消息,无序模式
     * 
     * @author ZHONGFUHUA
     *
     * @Date 2015年10月30日
     *
     */
    @Override
    public ProdResult send(byte[] msg, String tag, String key) throws MqException {
        if (msg == null || msg.length == 0) {
            throw new MqException("消息内容不能为空!");
        }
        
        Message rocketmqMsg = new Message(this.getTopicName(), StringUtils.isNotBlank(tag) ? tag
            : null, StringUtils.isNotBlank(key) ? key
            : null, msg);
        
        try {
            SendResult sendResult = producer.send(rocketmqMsg, new MessageQueueSelector() {
                @Override
                public MessageQueue select(List<MessageQueue> mqs, Message msg, Object param) {
                    int index = simpleSelector.onSelect(MessageUtil.rocketmq(msg), mqs.size(),
                        param);
                    return mqs.get(index);
                }
            }, null);
            return MessageUtil.rocketmq(sendResult);
        } catch (Exception e) {
            log.warn("CrmLogger: DisOrderly producer send message exception  {} [{}]",
                producer.getClientIP() + "@" + producer.getInstanceName(), e.getMessage());
            return MessageUtil.rocketmq(e);
        }
    }
    
    /**
     * 
     * 功能说明:关闭生产者
     * 
     * @author ZHONGFUHUA
     *
     * @Date 2015年10月30日
     *
     */
    @Override
    public void close() {
        if (producer != null) {
            producer.shutdown();
            log.info("CrmLogger: DisOrderly producer close success  [{}]", producer.getClientIP()
                + "@" + producer.getInstanceName());
            producer = null;
        } else {
            log.warn("CrmLogger: DisOrderly producer close fail, because producer object is null");
        }
    }
    
}
